#!/usr/bin/python

import re
import xmlrpclib
import getopt
import sys
import urllib2

api = xmlrpclib.ServerProxy('https://rpc.gandi.net/xmlrpc/')

def main():
    apikey = ''
    domain = ''
    record = ''
    rtypes = []
    quiet=False

    from optparse import OptionParser
    optp = OptionParser()
    optp.add_option('-a', '--api',    help='Specify API key')
    optp.add_option('-d', '--domain', help='Specify domain')
    optp.add_option('-4', '--ipv4',   help='Enable IPv4', action='store_true')
    optp.add_option('-6', '--ipv6',   help='Enable IPv6', action='store_true')
    optp.add_option('-r', '--record', help='Specify record data')
    optp.add_option('--extip4', help='Force external IPv4. This can be used to update a record with an IP different than the IP of the server/workstation from which the script is executed')
    optp.add_option('--extip6', help='Force external IPv6. This can be used to update a record with an IP different than the IP of the server/workstation from which the script is executed')
    optp.add_option('-q', '--quiet',    help='No output except to stderr on error', action='store_true')
    (opts, args) = optp.parse_args()
   
    # Process
    if opts.ipv4: rtypes.append('A')
    if opts.ipv6: rtypes.append('AAAA')
    domain = opts.domain
    apikey = opts.api
    record = opts.record    
    extip4 = opts.extip4
    extip6 = opts.extip6
    if opts.quiet: quiet=True
    
    if apikey == None or apikey == '':
        print >> sys.stderr, ("No Apikey specified")
        usage()
        sys.exit(79)
        
    #This call will always return true. cf comment regarding check_if_apikey_exists    
    if check_if_apikey_exists(apikey) == False:
        print >> sys.stderr, ("Apikey " + apikey + " does not exist or is malformed")
        usage()
        sys.exit(80)
        
    if domain == None:
        print >> sys.stderr, ("No Domain specified")
        usage()
        sys.exit(81)
        
    if check_if_domain_exists(apikey, domain) == False:
        print >> sys.stderr, ("Domain " + domain + " does not exist")
        usage()
        sys.exit(82)
    
    # Default
    if not rtypes:
        rtypes = ['A']

    addresses = {}

    for rtype in rtypes:
        if check_if_record_exists(apikey, get_zoneid_by_domain(apikey, domain), record, rtype) == False:
            print >> sys.stderr, (rtype + " Record " + record + " does not exist, please create")
            usage()
            sys.exit(83)

        if rtype == 'A':
            if extip4 != "" and not extip4 == None:
                address = extip4
            else :
                address = get_public_ipv4()
        elif rtype == 'AAAA':
            if extip6 != "" and not extip6 == None:
                address = extip6
            else :
                address = get_public_ipv6()
        if not address:
            print >> sys.stderr,  ("Can't find address for record type '" + rtype + "'")
            sys.exit(84)
        addresses[rtype] = address
        
    # Fetch the active zone id
    zone_id = get_zoneid_by_domain(apikey, domain)
    
    # Check if the current IPv4 address changed
    for rtype in rtypes:
        ip_changed = check_if_ip_changed(apikey, zone_id, record, rtype, addresses[rtype])
        if not ip_changed:
            if not quiet:
				print ("The IP for '" + record + "' did not change")
            sys.exit(0) 
    
    # Create a new zone version for zone id
    version_id = create_new_zone_version(apikey, zone_id)
    
    for rtype in rtypes:
        # Update the record for the zone id and zone version
        update_record(apikey, zone_id, version_id, record, rtype, addresses[rtype])
        if not quiet:
			print record + " " + rtype + " " + addresses[rtype]

    # Activate the new zone
    api.domain.zone.version.set(apikey, zone_id, version_id)

def usage():
    print("Usage: gandi-dyndns --api=<APIKEY> --domain=<DOMAIN> --record=<RECORD> [--ipv4] [--ipv6] [--quiet]")
    print("Example: gandi-dyndns --api=123ApIkEyFrOmGanDi --domain=example.com --record=www --ipv4")

def api_version(apikey):
    return api.version.info(apikey)

def zone_list(apikey):
    return api.domain.zone.list(apikey)

def zone_record_list(apikey, zone_id):
    return api.domain.zone.record.list(apikey, zone_id, 0)

def create_new_zone_version(apikey, zone_id):
    return api.domain.zone.version.new(apikey, zone_id)

def domain_info(apikey, domain):
    return api.domain.info(apikey, domain)

def get_zoneid_by_domain(apikey, domain):
    return domain_info(apikey, domain)['zone_id']

def get_public_ipv4():
    try:
        return urllib2.urlopen('http://api.externalip.net/ip/').read()
    except:
        return None

def get_public_ipv6():
    data = urllib2.urlopen("http://icanhazipv6.com").read()
    matches = re.search('<p class="my_address">(.*?)</p>', data)
    if matches:
        return matches.group(1)
    return None

def update_record(apikey, zone_id, zone_version, record, rtype, value):
    delete_record(apikey, zone_id, zone_version, record, rtype)
    insert_record(apikey, zone_id, zone_version, record, rtype, value)    

def delete_record(apikey, zone_id, zone_version, record, rtype):
    recordListOptions = {"name": record,
                         "type": rtype}

    records = api.domain.zone.record.delete(apikey, zone_id, zone_version, recordListOptions)

def insert_record(apikey, zone_id, zone_version, record, rtype, value):
    zoneRecord = {"name": record, 
                  "ttl": 10800, 
                  "type": rtype, 
                  "value": value}

    api.domain.zone.record.add(apikey, zone_id, zone_version, zoneRecord)

def check_if_domain_exists(apikey, domain):
    try:
        api.domain.info(apikey, domain)
        return True
    except xmlrpclib.Fault as err:
        return False

#will always return true, even with malformed or empty apikey.
#api.version.info(apikey) in api_version returns a valid API version
#even if apikey is empty string or None.
def check_if_apikey_exists(apikey):
    try:
        api_version(apikey)
        return True
    except xmlrpclib.Fault as err:
        return False

def check_if_record_exists(apikey, zone_id, record, rtype): 
    recordListOptions = {"name": record, 
                         "type": rtype}

    records = api.domain.zone.record.list(apikey, zone_id, 0, recordListOptions)
    if len(records) > 0:
        return True

    return False

def check_if_ip_changed(apikey, zone_id, record, rtype, external_ip):
    recordListOptions = {"name": record,
                         "type": rtype}
    
    records = api.domain.zone.record.list(apikey, zone_id, 0, recordListOptions)
    if len(records) > 0:
        for record in records:
            if record['value'] == external_ip:
                return False
            
        return True
        
    return False

if __name__ == "__main__":
    main()
